= Windows 10 Configuration =
:Win10:

%% = Contents =
- [[#Windows 10 Configuration|Windows 10 Configuration]]
  - [[#Windows 10 Configuration#Windows Update Fails|Windows Update Fails]]
  - [[#Windows 10 Configuration#NumLock on Startup|NumLock on Startup]]
  - [[#Windows 10 Configuration#Explorer Quick Access|Explorer Quick Access]]
  - [[#Windows 10 Configuration#Chocolatey|Chocolatey]]
  - [[#Windows 10 Configuration#Vim Installation and Update|Vim Installation and Update]]
  - [[#Windows 10 Configuration#Windows Subsystem for Linux|Windows Subsystem for Linux]]
    - [[#Windows 10 Configuration#Windows Subsystem for Linux#Share Environment Vars between WSL and Windows|Share Environment Vars between WSL and Windows]]
    - [[#Windows 10 Configuration#Windows Subsystem for Linux#WSL Configuration|WSL Configuration]]
    - [[#Windows 10 Configuration#Windows Subsystem for Linux#Access WSL Files from Windows|Access WSL Files from Windows]]
    - [[#Windows 10 Configuration#Windows Subsystem for Linux#Configure SSH in each WSL Distro|Configure SSH in each WSL Distro]]
    - [[#Windows 10 Configuration#Windows Subsystem for Linux#Windows Firewall Rules for SSH|Windows Firewall Rules for SSH]]
      - [[#Windows 10 Configuration#Windows Subsystem for Linux#Windows Firewall Rules for SSH#Add Unix socket access to Windows OpenSSH for KeeAgent|Add Unix socket access to Windows OpenSSH for KeeAgent]]
      - [[#Windows 10 Configuration#Windows Subsystem for Linux#Windows Firewall Rules for SSH#Automatically Start WSL sshd|Automatically Start WSL sshd]]
    - [[#Windows 10 Configuration#Windows Subsystem for Linux#WSL X11 Setup|WSL X11 Setup]]
    - [[#Windows 10 Configuration#Windows Subsystem for Linux#Git Credentials|Git Credentials]]
    - [[#Windows 10 Configuration#Windows Subsystem for Linux#Git lfs|Git lfs]]
    - [[#Windows 10 Configuration#Windows Subsystem for Linux#Whitewater Foundry Fedora Remix|Whitewater Foundry Fedora Remix]]
    - [[#Windows 10 Configuration#Windows Subsystem for Linux#Whitewater Foundry Pengwin|Whitewater Foundry Pengwin]]
    - [[#Windows 10 Configuration#Windows Subsystem for Linux#WSL Troubleshooting|WSL Troubleshooting]]
      - [[#Windows 10 Configuration#Windows Subsystem for Linux#WSL Troubleshooting#Server execution failed|Server execution failed]]
  - [[#Windows 10 Configuration#Windows Terminal|Windows Terminal]]
  - [[#Windows 10 Configuration#Console Colorscheme|Console Colorscheme]]
  - [[#Windows 10 Configuration#Google Chrome|Google Chrome]]
  - [[#Windows 10 Configuration#Symlinks|Symlinks]]
  - [[#Windows 10 Configuration#HP Envy BIOS Settings|HP Envy BIOS Settings]]

== Windows Update Fails ==

- Windows 10 Insider Preview 10.0.17738.1000 (RS5_RELEASE)
  [[https://answers.microsoft.com/en-us/windows/forum/windows_10-update/windows-10-insider-preview-100177381000-rs5release/33da6c23-c9db-4096-8d68-38ee39d51b89|Install Error-SOLVED]]
    - Open cmd.exe as Adminstrator

{{{ dos
Sfc.exe /Scannow
Dism.exe /online /Cleanup-Image /StartComponentCleanup
Dism.exe /online /Cleanup-Image /restorehealth
}}}

    - restart the computer
- [[https://answers.microsoft.com/en-us/windows/forum/windows_10-update/failed-to-install-2017-07-cumulative-update-for/de8fb22d-e611-4a2e-89f9-6944b78aa01b?auth=1|Microsoft Answers]]
  recommends repairing the Windows Update database, which may need to be run
  several times until no errors are found:
- Open Windows `powershell (Admin)`:

{{{ powershell
cd $env:windir\diagnostics\system\windowsupdate\
Get-TroubleshootingPack  .  |  Invoke-TroubleshootingPack  -Result  $env:TEMP
}}}

- Open `cmd.exe` with admin. rights:

{{{ DOS
net stop wuauserv
del /f /s /q C:\Windows\SoftwareDistribution\DataStore\*.*
del /f /s /q C:\Windows\SoftwareDistribution\Download\*.*
net start wuauserv
wuauclt /detectnow /reportnow
}}}

- If Windows Update becomes stuck in a re-boot and install loop, upgrade to a
  later ISO from
  [[https://www.microsoft.com/en-us/software-download/windowsinsiderpreviewadvanced|Windows Insider Preview Downloads]].

== NumLock on Startup ==

1. On the Logon/Lock screen, press the NumLock key on the keyboard to turn it on.
2. The Login screen contains a power button in the bottom right corner. Use it to reboot Windows.
3. If that does not work:
  1. Win-R regedit
  2. `HKEY_USERS\.DEFAULT\Control Panel\Keyboard`
  3. Default InitialKeyboardIndicators should be `2147483658` (`0x8000000A`).
  4. Set InitialKeyboardIndicators to `2147483650` i.e., `0x80000002` if Windows
     does not save NumLock status after reboot.
  5. `HKEY_CURRENT_USER\Control Panel\Keyboard` does the following:

| InitialKeyboardIndicators value | Purpose                                                 |
|---------------------------------|---------------------------------------------------------|
| 0                               | Turn all indicators off (NumLock, CapsLock, ScrollLock) |
| 1                               | Turn CapsLock on                                        |
| 2                               | Turn NumLock on                                         |
| 3                               | Turn CapsLock and NumLock on                            |
| 4                               | Turn ScrollLock on                                      |
| 5                               | Turn CapsLock and ScrollLock on                         |
| 6                               | Turn NumLock and ScrollLock on                          |
| 7                               | Turn all indicators on (NumLock, CapsLock, ScrollLock)  |

== Explorer Quick Access ==

There are situations where nothing would work and invalid pinned shortcut in
Quick access get stuck and not removable. According to [[http://www.winhelponline.com/blog/fix-quick-access-reset-pinned-shortcuts-stuck-not-working-windows-10/|winhelponline]],
deleting the following file will reset the Quick Access menu to its default
pinned folders.

{{{ DOS
cmd.exe /c del "%AppData%\Microsoft\Windows\Recent\AutomaticDestinations\f01b4d95cf55d32a.automaticDestinations-ms"
}}}

== Chocolatey ==
:choco:

[[https://chocolatey.org/|Chocolatey]] can serve as a package manager for Windows. The package
[[https://chocolatey.org/packages/choco-package-list-backup|choco-package-list-backup]] creates the packages.config file after
configuring where to save the backup by editing variables
in [[file:C:/ProgramData/chocolatey/bin/choco-package-list-backup.bat|choco-package-list-backup.bat]] to select a backup location.
If any --params were passed to choco install, these need to be manually added
(note the script overwrites the file without prompting, so save to a different
location).  [[https://github.com/chocolatey/choco/wiki/CommandsInstall]] describes the packageParameters
key that would need to be added to packages.config to replicate the previous
installation.

=== Improving choco list with options to show dependencies and sort by date (and more) #1276 ===
:choco:powershell:

- [[https://github.com/chocolatey/choco/issues/1276#issuecomment-754642856|Improving choco list with options to show dependencies and sort by date (and more) #1276]]

{{{powershell
$packages = Get-ChildItem C:\ProgramData\chocolatey\lib\ -Recurse  *.nuspec | select fullname,name
foreach($p in $packages){
        [XML]$xml=get-content $p.fullname
        $dependencies = $xml.package.metadata.dependencies.dependency
        foreach($d in $dependencies){
	        $obj = New-Object -TypeName psobject
	        $obj | Add-Member -MemberType NoteProperty -name package  -Value $xml.package.metadata.id
	        $obj | Add-Member -MemberType NoteProperty -name packageversion  -Value $xml.package.metadata.version
	        $obj | Add-Member -MemberType NoteProperty -name dependency  -Value  $d.id
	        $obj | Add-Member -MemberType NoteProperty -name dependencyversion  -Value  $d.version
	        $obj
        }
}
}}}

== Vim Installation and Update ==
:vim:install:

Depending on access to an elevated shell, perform the following.

- [[https://github.com/vim/vim-win32-installer/releases|Vim Win32 Installer]] includes 64 bit vim with `python3_dynamic`.
  - Move the old version to, e.g., `$env:USERPROFILE\vim\vim82.old`.
  - Unzip to `$env:USERPROFILE\vim`.
  - Delete the old version if the new one works.
- From an elevated shell install with `Choclatey`, which should register
  `gvimext.dll`. `choco install vim /RestartExplorer`
- [[https://github.com/jfishe/vimfiles|Personal and work vim 8 configuration with submodules]]
  provides instructions for registering `gvimext.dll` manually.
- The default batch files do not activate a compatible python38 environment.
  [[https://github.com/jfishe/vimfiles|Personal and work vim 8 configuration with submodules]]
  provides a conda environment.yml to create the python38 environment.
- It also provides `:call condaactivate#AddConda2Vim()` to activate `python38`
  by updating `$env:LOCALAPPDATA\Microsoft\WindowsApps\*vim*.bat` Copy the
  files from `C:\Tools\vim\vim82\*vim*.bat` if they don't already exist.
  Choclatey overwrites the existing batch files with every update.

== Windows Subsystem for Linux ==
:WSL:Ubuntu:WSL2:

1. Microsoft Documents provides
   [[https://aka.ms/wsl2-install|Installation Instructions for WSL 2 ]].
   For information on key differences with WSL 2 refer to Microsoft
   Documentation for [[https://aka.ms/wsl2|WSL 2]].
2. Create/update `/etc/wsl.conf` per [[#WSL Configuration|WSL Configuration]].
3. Set `root` password.
4. Setup `$WSLENV` per [[#Share Environment Vars between WSL and Windows|Share Environment Vars between WSL and Windows]].
5. Install `rc file (dotfile) management` and clone/update `~/.dotfiles` per [[https://github.com/jfishe/dotfiles]]
6. Configure `sshd_config` per [[#Configure SSH in each WSL Distro|Configure SSH in each WSL Distro]]:
  1. Open private network access with [[#Windows Firewall Rules for SSH|Windows Firewall Rules for SSH]].
  2. [[#Add Unix socket access to Windows OpenSSH for KeeAgent|Add Unix socket access to Windows OpenSSH for KeeAgent]].
  3. [[#Automatically Start WSL sshd|Automatically Start WSL sshd]].

=== Share Environment Vars between WSL and Windows ===

[[https://blogs.msdn.microsoft.com/commandline/2017/12/22/share-environment-vars-between-wsl-and-windows/|Share Environment Vars between WSL and Windows]]
The following is useful to link vim, git and other settings files on the
Windows side.

%% todo: Explain the environment variables.

`WT_SESSION:USERPROFILE/p:APPDATA/p:LOCALAPPDATA/p:TMP/p:WT_PROFILE_ID`

=== WSL Configuration ===

[[https://docs.microsoft.com/en-us/windows/wsl/wsl2-install|Automatically Configuring WSL]]
provides guidance on `/etc/wsl.conf`. Changes to wsl.conf do not take affect
until reboot or `Restart-Service -Name "LxssManager"`.

Umask may be set in `~/.profile` to reasonable values for user created files.

UID and GID should be set per the user, so that files are not owned by root.

fmask should be abbreviated form to avoid a bug in some WSL versions that
convert 0011 into 0111. Case should be off so that Windows programs can be
executed from WSL.

{{{ ini
[automount]
enabled = true
# root = /mnt/
options = "metadata,uid=1000,gid=1000,umask=22,fmask=11,case=off"
mountFsTab = false

#Let’s enable DNS – even though these are turned on by default, we’ll specify her
[network]
generateHosts = true
generateResolvConf = true
}}}

=== Access WSL Files from Windows ===

Linux files for a running WSL distro are located at `\\wsl$\<distro_name>`.

=== Configure SSH in each WSL Distro ===
:ssh:

The file -- /etc/ssh/sshd_config -- will need to be edited to add/change the
following:

- Change - PermitRootLogin no
- Add -    AllowUsers yourusername
- Change - PasswordAuthentication yes # setup ssh keys and change to no
- Change - ListenAddress 0.0.0.0
- Add -    UsePrivilegeSeparation no # can be left at yes
- Add -
  - Port 2200 # for Ubuntu
  - Port 2201 # for Pengwin
  - Port 2202 # for fedoraremix

{{{ bash
sudo service ssh --full-restart
}}}

=== Windows Firewall Rules for SSH ===

[[https://www.illuminiastudios.com/dev-diaries/ssh-on-windows-subsystem-for-linux/|Enable Port 22 in Windows Firewall]]
provides the steps. Other directions from the website maybe dated for more
recent versions of WSL.

1. Open Windows Firewall Advance Settings.
2. Click on New Rule… under Inbound Rules to create a new firewall rule.
3. Under Rule Type select Port.
4. Click Next to Continue.
5. Under Protocol and Ports select Specific local Ports and enter
   `2200,2201,2202`, depending on the WSL distros installed. Do not include Port 22; the rule `OpenSSH
   SSH Server (sshd)` manages Port 22 on Windows.
6. Click Next to Continue.
7. Under Action select Allow the connection
8. Under Profile make sure to only select Domain and Private.
9. Click Next to Continue.
10. Under Name:
  1. Name: WSL SSH
  2. Description: Open SSH ports for Windows and WSL
  3. Click Finish

==== Verify ssh key access with KeePass and KeeAgent ====
:ssh:powershell:

OpenSSH uses the same command on PowerShell and Linux.

Open KeePass and enter the following to list available private ssh keys. It
should work in WSL if socat and npiperelay are working.

{{{ bash
ssh-add -l
}}}

==== Add Unix socket access to Windows OpenSSH for KeeAgent ====
:ssh:

At the moment WSL cannot access Windows named pipes, so [[https://github.com/dlech/KeeAgent/issues/159#issuecomment-409512544|Philipp Scheit]]
proposed using `socat` and [[https://github.com/jstarks/npiperelay|John Starks]] created `npiperelay` with the following
build instructions, modified for my use. `~/.dotfiles/install.sh` automates,
removing the dependency on the symlink to `%USERPROFILE%`, but requiring
`%WSLENV%` to include `USERPROFILE/p`.

{{{ bash
# Perform once to create npiperelay.exe in %USERPROFILE%\go\bin.
GOOS=windows go get -d github.com/jstarks/npiperelay
GOOS=windows go build -o $HOME/userprofile/go/bin/npiperelay.exe \
  github.com/jstarks/npiperelay

# Perform once on each WSL distro.
sudo ln -s $HOME/userprofile/go/bin/npiperelay.exe \
  /usr/local/bin/npiperelay.exe

# Add to ~/.profile
if [ ! -f /tmp/ssh-agent-pipe ]; then
  socat UNIX-LISTEN:/tmp/ssh-agent-pipe,fork,group=fishe,umask=007 \
    EXEC:"npiperelay.exe -ep -s //./pipe/openssh-ssh-agent",nofork &
  export SSH_AUTH_SOCK=/tmp/ssh-agent-pipe
fi
}}}

==== Automatically Start WSL sshd ====
:ssh:

WSL does not support `systemd`, so `sshd` does not start automatically on boot.
[[https://github.com/WhitewaterFoundry/Pengwin|WhitewaterFoundry / Pengwin]] provides a solution by starting `sshd` in
the login scripts. This requires no password `sudo` for `sshd` to avoid
entering a password every time the login scripts run.

1. Create `/usr/bin/start-ssh` with the following content.

{{{ bash
#!/bin/bash

sshd_status=$(service ssh status)
if [[ ${sshd_status} = *"is not running"* ]]; then
 service ssh --full-restart > /dev/null 2>&1
fi
}}}

2. Create `/etc/profile.d/start-ssh` with the following content.

{{{ bash
sudo /usr/bin/start-ssh
}}}

3. Allow users to start `sshd` without `sudo` password, by creating
   `/etc/sudoers.d/start-ssh` with the following content.

{{{ bash
sudo /usr/bin/start-ssh
}}}

4. Set permissions and owner.

{{{ bash
sudo chmod 700 /usr/bin/start-ssh
sudo chmod 644 /etc/profile.d/start-ssh.sh
sudo chmod 0440 /etc/sudoers.d/start-ssh
sudo chown root.root /usr/bin/start-ssh
sudo chown root.root /etc/profile.d/start-ssh.sh
sudo chown root.root /etc/sudoers.d/start-ssh
}}}

=== WSL X11 Setup ===

Note clipboard may not share immediately with Windows. Workaround: copy
something into clipboard from X11; then sharing should work.

From
[[https://virtualizationreview.com/articles/2017/02/08/graphical-programs-on-windows-subsystem-on-linux.aspx|graphical programs on windows subsystem on linux aspx]]
do the following to get X11 on WSL:

From WSL Ubuntu:

{{{ bash
sudo apt-get remove  openssh-server
sudo apt-get install  openssh-server
}}}

Install X410 from Microsoft Store or Xming.

For Xming, from Windows PowerShell (Admin):

{{{ powershell
choco install Xming -y
}}}

From Windows Start-Menu, start Xming. When Windows Defender prompts, grant
access to private networks.

To start on login, `Win-R shell:startup` opens the startup folder and drag the
Xming/X410 icon to the startup folder. Link should appear in the icon when it
is over the startup folder.

From WSL Ubuntu:

{{{ bash
sudo apt-get install x11-apps

if [[ ! -z "$WSL_INTEROP" ]] ; then
  # For WSL2, determine the IP address of the Hyper-V VM.
  export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2; exit;}'):0.0
else
  # Otherwise localhost works.
  export DISPLAY=:0
fi

xeyes # to test
}}}

=== Git Credentials ===

The git-credential configuration for Linux requires support servers which don't
seem to run on WSL. However [[https://stackoverflow.com/questions/45925964/how-to-use-git-credential-store-on-wsl-ubuntu-on-windows#comment81823871_47350274|Stack Overflow]] provides the following solution.

{{{ bash
git config --global credential.helper "/mnt/c/Program\ Files/Git/mingw64/libexec/git-core/git-credential-wincred.exe"
}}}

=== Git lfs ===

Default Ubuntu doesn't support git-lfs. It can be installed from
[[https://github.com/git-lfs/git-lfs/wiki/Installation|git lfs Installation]].

{{{ bash
sudo apt-get install software-properties-common to install add-apt-repository (or sudo apt-get install python-software-properties if you are on Ubuntu <= 12.04)
sudo add-apt-repository ppa:git-core/ppa
sudo apt-get update
curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
sudo apt-get install git-lfs
git lfs instal
}}}

=== Whitewater Foundry Fedora Remix ===
:Fedora:

If the `gpg` keys do not work with `dnf`:

{{{ bash
rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY*
}}}

=== Whitewater Foundry Pengwin ===
:Debian:Pengwin:

If the `gpg` keys do not work with `apt-get`:

{{{ bash
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys <PUBKEY>
}}}

=== WSL Troubleshooting ===
:troubleshooting:

==== Server execution failed ====

[[https://answers.microsoft.com/en-us/windows/forum/all/error-server-execution-failed-when-trying-to-run/1e834b62-8106-4fc3-8bbf-9ab1b1218388|Error "Server execution failed" when trying to run bash command]]:

{{{ text
Press Windows key + R
Type: optionalfeatures.exe
Hit Enter

Scroll to the bottom

Uncheck Windows Subsystem for Linux
Click OK

Restart if prompted

Press Windows key + R
Type: optionalfeatures.exe
Hit Enter

Scroll to the bottom

Check Windows Subsystem for Linux
Click OK
}}}

Restart if prompted

Check if it now works.

== Windows Terminal ==

== Console Colorscheme ==

- [[https://github.com/Microsoft/Console/tree/master/tools/ColorTool|Microsoft Console ColorTool]]
  contains the source for ColorTool. Visual Studio is needed to compile.
- [[https://github.com/mbadolato/iTerm2-Color-Schemes|iTerm2 Color Schemes]]
  contains the itermcolors files used below.
- Set PSReadlineOption for `Number` and `Member` `ForegroundColor` to `Black`.
  The default is white on white.
- ColorTool doesn't change Default colors. Set manually.
- Put ColorTool.exe and `Solarized Dark Higher Contrast.itermcolors` and
  `Solarized Light.itermcolors` in `Documents\Windowspowershell`.

== Google Chrome ==

To prevent Chrome from auto-launching on login, open Settings-System-Continue running background apps when Google Chrome is closed. The no startup window switch doesn't appear to work.

{{{ DOS
copy
REG QUERY HKCU\Software\Microsoft\Windows\CurrentVersion\Run /v GoogleChromeAutoLaunch*
Alt-R
regedit
Delete Computer\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run\GoogleChromeAutoLaunch_*
}}}

{{{ powershell
$RegPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run"
$RegProperty = "GoogleChromeAutoLaunch*"
Get-ItemProperty -Path $RegPath -Name $RegProperty
Remove-ItemProperty -Path $RegPath -Name $RegProperty -Confirm
}}}

- Get-Help Registry
- [[https://www.wikihow.com/Block-an-Application-or-.EXE-from-Running-in-Windows]]
- [[https://www.howtogeek.com/241752/how-to-stop-windows-10-apps-from-running-in-the-background/]]

== Symlinks ==
:mklink:SeCreateSymbolicLinkPrivilege:symlinkevaluation:

Windows reserves certain file extensions, like .COM, .PRN, etc. This can
create problems with symlinks being misunderstood from `cmd.exe` and
Explorer. Solve by ending the link name with `.` when using mklink. The `.`
does not show up in the actual link name so bash, etc. are not impacted.

{{{ DOS
mklink /D remodel_richland.droppages.com. C:\Users\fishe\Dropbox\Apps\My.DropPages\remodel_richland.droppages.com
}}}

[[https://github.com/Isiweb/7zBackup/issues/11#issuecomment-371811252|mklink]] may respond
`You do not have sufficient privilege to perform this operation.`
`/J` or `/H` usually are less restrictive but won't work with WSL symbolic
links or OneDrive.
[[https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/create-symbolic-links|Microsoft]]
provides additional detail regarding :SeCreateSymbolicLinkPrivilege:

- Run `gpedit.msc`
- Navigate to Computer configuration → Windows Settings → Security Settings →
  Local Policies → User Rights Assignment → Create symbolic links
- Here you can set which users can create symbolic links.
- You may need to change :symlinkevaluation: for OneDrive or corporate network
  locations. The defaults work in most cases.

{{{powershell
fsutil behavior query symlinkevaluation
}}}
{{{text
Local-to-local symbolic link evaluation is: ENABLED
Local-to-remote symbolic link evaluation is: ENABLED
Remote-to-local symbolic link evaluation is: DISABLED
Remote-to-remote symbolic link evaluation is: DISABLED
}}}

== HP Envy BIOS Settings ==
:BIOS:HP:

Pres `F10` repeatedly during boot.

