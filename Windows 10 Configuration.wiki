= Windows 10 Configuration =
:Win10:

= Contents =
- [[#Windows 10 Configuration|Windows 10 Configuration]]
    - [[#Windows 10 Configuration#Windows Update Fails|Windows Update Fails]]
    - [[#Windows 10 Configuration#NumLock on Startup|NumLock on Startup]]
    - [[#Windows 10 Configuration#Explorer Quick Access|Explorer Quick Access]]
    - [[#Windows 10 Configuration#Chocolatey|Chocolatey]]
    - [[#Windows 10 Configuration#Windows Subsystem for Linux|Windows Subsystem for Linux]]
        - [[#Windows 10 Configuration#Windows Subsystem for Linux#WSL X11 Setup|WSL X11 Setup]]
        - [[#Windows 10 Configuration#Windows Subsystem for Linux#Git Credentials|Git Credentials]]
        - [[#Windows 10 Configuration#Windows Subsystem for Linux#Git lfs|Git lfs]]
    - [[#Windows 10 Configuration#Console Colorscheme|Console Colorscheme]]
    - [[#Windows 10 Configuration#Google Chrome|Google Chrome]]
    - [[#Windows 10 Configuration#PowerShell|PowerShell]]


== Windows Update Fails ==

[[https://answers.microsoft.com/en-us/windows/forum/windows_10-update/failed-to-install-2017-07-cumulative-update-for/de8fb22d-e611-4a2e-89f9-6944b78aa01b?auth=1|Microsoft Answers]]
recommends repairing the Windows Update database, which may need to be run
several times until no errors are found:

* Open Windows `Powershell (Admin)`:

{{{ Powershell
cd $env:windir\diagnostics\system\windowsupdate\
Get-TroubleshootingPack  .  |  Invoke-TroubleshootingPack  -Result  $env:TEMP
}}}

* Open `cmd.exe` with admin. rights:

{{{ DOS
net stop wuauserv
del /f /s /q C:\Windows\SoftwareDistribution\DataStore\*.*
del /f /s /q C:\Windows\SoftwareDistribution\Download\*.*
net start wuauserv
wuauclt /detectnow /reportnow
}}}

== NumLock on Startup ==

1. On the Logon/Lock screen, press the NumLock key on the keyboard to turn it on.
2. The Login screen contains a power button in the bottom right corner. Use it to reboot Windows.
3. If that does not work:
  1. Win-R regedit
  2. `HKEY_USERS\.DEFAULT\Control Panel\Keyboard`
  3. Default InitialKeyboardIndicators should be `2147483658` (`0x8000000A`).
  4. Set InitialKeyboardIndicators to `2147483650` i.e., `0x80000002` if Windows
     does not save NumLock status after reboot.
  5. `HKEY_CURRENT_USER\Control Panel\Keyboard` does the following:

| InitialKeyboardIndicators value | Purpose                                                 |
|---------------------------------|---------------------------------------------------------|
| 0                               | Turn all indicators off (NumLock, CapsLock, ScrollLock) |
| 1                               | Turn CapsLock on                                        |
| 2                               | Turn NumLock on                                         |
| 3                               | Turn CapsLock and NumLock on                            |
| 4                               | Turn ScrollLock on                                      |
| 5                               | Turn CapsLock and ScrollLock on                         |
| 6                               | Turn NumLock and ScrollLock on                          |
| 7                               | Turn all indicators on (NumLock, CapsLock, ScrollLock)  |

== Explorer Quick Access ==

There are situations where nothing would work and invalid pinned shortcut in
Quick access get stuck and not removable. According to [[http://www.winhelponline.com/blog/fix-quick-access-reset-pinned-shortcuts-stuck-not-working-windows-10/|winhelponline]],
deleting the following file will reset the Quick Access menu to its default
pinned folders.

{{{ DOS
cmd.exe /c del "%AppData%\Microsoft\Windows\Recent\AutomaticDestinations\f01b4d95cf55d32a.automaticDestinations-ms"
}}}

== Chocolatey ==
:choco:

[[https://chocolatey.org/|Chocolatey]] can serve as a package manager for Windows. The package
[[https://chocolatey.org/packages/choco-package-list-backup|choco-package-list-backup]] creates the packages.config file after
configuring where to save the backup by editing variables
in [[file:C:/ProgramData/chocolatey/bin/choco-package-list-backup.ps1|choco-package-list-backup.ps1]] to select a backup location.
If any --params were passed to choco install, these need to be manually added
(note the script overwrites the file without prompting, so save to a different
location).  https://github.com/chocolatey/choco/wiki/CommandsInstall describes the packageParameters
key that would need to be added to packages.config to replicate the previous
installation.

== Windows Subsystem for Linux ==

=== WSL X11 Setup ===

From [[https://virtualizationreview.com/articles/2017/02/08/graphical-programs-on-windows-subsystem-on-linux.aspx|graphical programs on windows subsystem on linux aspx]] do the following to get X11 on WSL:

From WSL Ubuntu:

{{{ bash
sudo apt-get remove  openssh-server
sudo apt-get install  openssh-server
}}}

The file -- /etc/ssh/sshd_config -- will need to be edited to add/change the following:

* Change - PermitRootLogin no
* Add - AllowUsers yourusername
* Change - PasswordAuthentication yes
* Add - UsePrivilegeSeparation no
* Change - ListenAddress 0.0.0.0
* Change - Port 2200

{{{ bash
sudo service ssh --full-restart
}}}

From Windows PowerShell (Admin):

{{{ Powershell
choco install Xming -y
}}}

From Windows Start-Menu, start Xming. When Windows Defender prompts, grant access to private networks.

From WSL Ubuntu:

{{{ bash
sudo apt-get install x11-apps
export DISPLAY=:0
xeyes # to test
}}}

=== Git Credentials ===

The git-credential configuration for Linux requires support servers which don't
seem to run on WSL. However [[https://stackoverflow.com/questions/45925964/how-to-use-git-credential-store-on-wsl-ubuntu-on-windows#comment81823871_47350274|Stack Overflow]] provides the following solution.

{{{ bash
git config --global credential.helper "/mnt/c/Program\ Files/Git/mingw64/libexec/git-core/git-credential-wincred.exe"
}}}

=== Git lfs ===

Default Ubuntu doesn't support git-lfs. It can be installed from
[[https://github.com/git-lfs/git-lfs/wiki/Installation|git lfs Installation]].

{{{ bash
sudo apt-get install software-properties-common to install add-apt-repository (or sudo apt-get install python-software-properties if you are on Ubuntu <= 12.04)
sudo add-apt-repository ppa:git-core/ppa
sudo apt-get update
curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
sudo apt-get install git-lfs
git lfs instal
}}}

== Console Colorscheme ==

* [[https://github.com/Microsoft/Console/tree/master/tools/ColorTool|Microsoft Console ColorTool]]
  contains the source for ColorTool. Visual Studio is needed to compile.
* [[https://github.com/mbadolato/iTerm2-Color-Schemes|iTerm2 Color Schemes]]
  contains the itermcolors files used below.
* Set PSReadlineOption for `Number` and `Member` `ForegroundColor` to `Black`.
  The default is white on white.
* ColorTool doesn't change Default colors. Set manually.
* Put ColorTool.exe and `Solarized Dark Higher Contrast.itermcolors` and
  `Solarized Light.itermcolors` in `Documents\WindowsPowerShell`.

== Google Chrome ==

To prevent Chrome from auto-launching on login, open Settings-System-Continue running background apps when Google Chrome is closed. The no startup window switch doesn't appear to work.

{{{ dosbatch
REG QUERY HKCU\Software\Microsoft\Windows\CurrentVersion\Run /v GoogleChromeAutoLaunch*
Alt-R
regedit
Delete Computer\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run\GoogleChromeAutoLaunch_*
}}}

{{{ powershell
$RegPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run"
$RegProperty = "GoogleChromeAutoLaunch*"
Get-ItemProperty -Path $RegPath -Name $RegProperty
Remove-ItemProperty -Path $RegPath -Name $RegProperty -Confirm
}}}

* Get-Help Registry
* https://www.wikihow.com/Block-an-Application-or-.EXE-from-Running-in-Windows
* https://www.howtogeek.com/241752/how-to-stop-windows-10-apps-from-running-in-the-background/

== PowerShell ==
* [[https://github.com/PowerShell/Plaster/|Plaster]] template engine.
* List module commands:

{{{ powershell
Get-Command -Module <ModuleName>
Get-PSRepository

# Hide dotfiles
Get-ChildItem "$env:USERPROFILE" | # -recurse -force |
    Where-Object {$_.name -like ".*" -and $_.attributes -match 'Hidden' -eq $false} |
    Set-ItemProperty -name Attributes -value ([System.IO.FileAttributes]::Hidden)

}}}
